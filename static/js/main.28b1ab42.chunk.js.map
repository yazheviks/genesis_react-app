{"version":3,"sources":["api/api.js","components/Planet.jsx","components/Planets.jsx","components/Button.jsx","components/PageError.jsx","components/PlanetInfo.jsx","components/PlanetPage.jsx","App.jsx","index.js"],"names":["getPlanets","url","fetch","options","then","result","ok","Error","status","statusText","json","results","map","planet","i","id","Planet","to","className","name","src","alt","climate","population","Planets","useState","planets","setPlanets","useEffect","planetX","classNames","require","Button","text","mission","href","exact","btn","type","PageError","PlanetInfo","residents","rotation_period","diameter","gravity","terrain","length","person","PlanetPage","match","setPlanet","planetsLength","setPlanetsLength","setResidents","planetId","params","res","planetFound","find","pl","people","forEach","personURL","replace","personJSON","push","App","path","component","render","routerParams","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.28b1ab42.chunk.js","sourcesContent":["export const BASE_URL = 'https://swapi.dev/api/';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((result) => {\n    if (!result.ok) {\n      throw new Error(`${result.status} - ${result.statusText}`);\n    }\n\n    return result.json();\n  });\n\nexport const getPlanets = () => request('planets/')\n  .then(result => result.results)\n  .then(result => result.map((planet, i) => ({\n    ...planet,\n    id: i + 1,\n  })));\n","/* eslint-disable no-console */\n/* eslint-disable react/self-closing-comp */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes, { arrayOf } from 'prop-types';\n// import { PlanetPage } from './PlanetPage';\n\nexport const Planet = ({ planet }) => (\n  <div>\n    <Link\n      to={`/planets/${planet.id}`}\n    >\n      <div className=\"planets__planet planet card\">\n        <h1 className=\"planet__title card-title\">\n          {planet.name}\n        </h1>\n        <img\n          src=\"./planet.svg\"\n          alt={planet.name}\n          className=\"card-img-top\"\n        />\n        <div className=\"planet__info\">\n          <span className=\"card-text\">{`Climate: ${planet.climate}`}</span>\n          <span className=\"card-text\">\n            {`Population: ${planet.population}`}\n          </span>\n        </div>\n      </div>\n    </Link>\n  </div>\n);\nPlanet.propTypes = {\n  planet: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    rotation_period: PropTypes.string,\n    orbital_period: PropTypes.string,\n    diameter: PropTypes.string,\n    climate: PropTypes.string,\n    gravity: PropTypes.string,\n    terrain: PropTypes.string,\n    surface_water: PropTypes.string,\n    population: PropTypes.string,\n    residents: arrayOf(PropTypes.string),\n    films: arrayOf(PropTypes.string),\n    created: PropTypes.string,\n    edited: PropTypes.string,\n    url: PropTypes.string,\n  }).isRequired,\n};\n","/* eslint-disable no-debugger */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nimport { getPlanets } from '../api/api';\nimport { Planet } from './Planet';\n\nexport const Planets = () => {\n  const [planets, setPlanets] = useState([]);\n\n  useEffect(() => {\n    getPlanets()\n      .then(setPlanets);\n  }, []);\n\n  return (\n    <div className=\"planets\">\n      {planets.map(planetX => (\n        <Planet\n          planets={planets}\n          planet={planetX}\n          key={planetX.id}\n        />\n      ))}\n    </div>\n  );\n};\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst classNames = require('classnames');\n\nexport const Button = ({ text, mission, href }) => (\n  <Link\n    to={href}\n    exact\n  >\n    <button\n      className={classNames({\n        'planet-page__arrow': true,\n        btn: true,\n        'btn-danger': mission === 'return',\n        'btn-dark': mission === 'next' || mission === 'prev',\n      }, `planet-page__arrow--${mission}`)}\n      type=\"button\"\n    >\n      {text}\n    </button>\n  </Link>\n);\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nexport const PageError = ({ text }) => (\n  <div className=\"planet-page__error\">\n    {text}\n  </div>\n);\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\n// const = require('classnames');\nexport const PlanetInfo = ({ planet, residents }) => (\n  <>\n    <h1 className=\"planet-page__title\">{planet.name}</h1>\n    <p className=\"planet-page__rotation-period\">\n      {`Rotation period: ${planet.rotation_period}`}\n    </p>\n    <p className=\"planet-page__diameter\">\n      {`Diameter: ${planet.diameter}`}\n    </p>\n    <p className=\"planet-page__climate\">\n      {`Climate: ${planet.climate}`}\n    </p>\n    <p className=\"planet-page__gravity\">\n      {`GRavity: ${planet.gravity}`}\n    </p>\n    <p className=\"planet-page__terrain\">\n      {`Terrain: ${planet.terrain}`}\n    </p>\n    <p className=\"planet-page__population\">\n      {`Population: ${planet.population}`}\n    </p>\n    <div className=\"planet-page__residents\">\n      {residents && residents.length === 0 && (\n        <div>We know nobody from here...</div>\n      )}\n      {residents ? (\n        residents.length > 0 && (\n          <div>\n            You may know them:\n            {residents.map(person => (\n              <p className=\"planet-page__resident\">{person.name}</p>\n            ))}\n          </div>\n        )\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  </>\n);\n","/* eslint-disable max-len */\n/* eslint-disable indent */\n/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable arrow-body-style */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport { getPlanets } from '../api/api';\nimport { Button } from './Button';\nimport { PageError } from './PageError';\nimport { PlanetInfo } from './PlanetInfo';\n\nexport const PlanetPage = ({ match }) => {\n  const [planet, setPlanet] = useState(null);\n  const [planetsLength, setPlanetsLength] = useState(null);\n  const [residents, setResidents] = useState(null);\n  const planetId = +match.params.planetId;\n\n  useEffect(() => {\n    getPlanets()\n      .then((res) => {\n        const planetFound = res.find(pl => pl.id === planetId);\n\n        setPlanet(planetFound);\n        setPlanetsLength(res.length);\n\n        return planetFound;\n      })\n      .then((pl) => {\n        const people = [];\n\n        if (!pl) {\n          return;\n        }\n\n        if (pl.residents.length === 0) {\n          setResidents([]);\n        }\n\n        pl.residents.forEach((personURL) => {\n          const url = personURL.replace('http', 'https');\n\n          fetch(url)\n            .then(person => person.json())\n            .then((personJSON) => {\n              people.push(personJSON);\n            })\n            .then(() => {\n              setResidents([...people]);\n            });\n        });\n      });\n  }, [planetId]);\n\n  const isErrorPage = (planetsLength !== null && planetId > planetsLength)\n  || (planetId <= 0 && planetsLength !== null);\n\n  if (isErrorPage) {\n    return planetId > planetsLength ? (\n      <div className=\"planet-page\">\n        <PageError text=\"Thant&apos;s all...\" />\n        <Button\n          text=\"X\"\n          mission=\"return\"\n          href=\"/planets\"\n        />\n\n        <Button\n          text=\"<\"\n          mission=\"prev\"\n          href={`/planets/${planetId - 1}`}\n        />\n      </div>\n    ) : (\n      <div className=\"planet-page\">\n        <PageError text=\"Thant&apos;s all...\" />\n        <Button\n          text=\"X\"\n          mission=\"return\"\n          href=\"/planets\"\n        />\n        <Button\n          text=\">\"\n          mission=\"next\"\n          href={`/planets/${planetId + 1}`}\n        />\n      </div>\n    );\n  }\n\n  return planet ? (\n    <div className=\"planet-page\">\n      <Button\n        text=\">\"\n        mission=\"next\"\n        href={`/planets/${planetId + 1}`}\n      />\n      <Button\n        text=\"<\"\n        mission=\"prev\"\n        href={`/planets/${planetId - 1}`}\n      />\n      <Button\n        text=\"X\"\n        mission=\"return\"\n        href=\"/planets\"\n      />\n      <PlanetInfo\n        planet={planet}\n        residents={residents}\n      />\n    </div>\n  ) : (\n    <PageError text=\"Loading...\" />\n  );\n};\n","/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/prop-types */\n/* eslint-disable react/react-in-jsx-scope */\n/* eslint-disable arrow-body-style */\nimport React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { getPlanets } from './api/api';\nimport { Planets } from './components/Planets';\nimport { PlanetPage } from './components/PlanetPage';\nimport { PageError } from './components/PageError';\nimport { Button } from './components/Button';\n\nexport const App = () => {\n  const [planets, setPlanets] = useState([]);\n\n  useEffect(() => {\n    getPlanets()\n      .then(setPlanets);\n  }, []);\n\n  return (\n    <div>\n      <h1 className=\"page__title\">Star wars universe</h1>\n      <Switch>\n        <Route\n          path=\"/planets\"\n          component={Planets}\n          exact\n        />\n\n        <Route\n          path=\"/planets/:planetId\"\n          render={routerParams => (\n            <PlanetPage\n              {...routerParams}\n              planets={planets}\n              planetsLength={planets.length}\n            />\n          )}\n        />\n\n        <Redirect path=\"/\" to=\"/planets\" exact />\n        <Redirect path=\"/genesis_react-app\" to=\"/planets\" exact />\n\n        <div className=\"error-page\">\n          <PageError text=\"Page is not found\" />\n          <Button\n            text=\"back to main\"\n            mission=\"return\"\n            href=\"/planets\"\n          />\n        </div>\n      </Switch>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}