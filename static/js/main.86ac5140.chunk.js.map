{"version":3,"sources":["api/api.js","components/Planet/Planet.jsx","components/Planets/Planets.jsx","components/Button/Button.jsx","components/PageError/PageError.jsx","components/PlanetInfo/PlanetInfo.jsx","components/PlanetPage/PlanetPage.jsx","App.jsx","index.js"],"names":["getPlanets","url","fetch","options","then","result","ok","Error","status","statusText","json","results","map","planet","i","id","Planet","to","style","textDecoration","className","name","climate","population","Planets","planets","planetX","classNames","require","Button","text","mission","href","exact","btn","type","PageError","PlanetInfo","residents","rotation_period","diameter","gravity","terrain","length","person","defaultProps","PlanetPage","match","useState","setResidents","planetId","params","find","pl","planetsLength","useEffect","people","forEach","personURL","replace","personJSON","push","App","setPlanets","path","render","routerParams","ReactDOM","StrictMode","document","getElementById"],"mappings":"uPAWaA,EAAa,kBATFC,EASgB,WATCC,MAAM,GAAD,OAFtB,0BAEsB,OAAeD,GAAOE,GACjEC,MAAK,SAACC,GACL,IAAKA,EAAOC,GACV,MAAM,IAAIC,MAAJ,UAAaF,EAAOG,OAApB,cAAgCH,EAAOI,aAG/C,OAAOJ,EAAOK,WAIfN,MAAK,SAAAC,GAAM,OAAIA,EAAOM,WACtBP,MAAK,SAAAC,GAAM,OAAIA,EAAOO,KAAI,SAACC,EAAQC,GAAT,mBAAC,eACvBD,GADsB,IAEzBE,GAAID,EAAI,UAbW,IAACb,EAAKE,GCEhBa,EAAS,SAAC,GAAD,IAAGH,EAAH,EAAGA,OAAH,OACpB,8BACE,cAAC,IAAD,CACEI,GAAE,mBAAcJ,EAAOE,IACvBG,MAAO,CAAEC,eAAgB,QAF3B,SAIE,sBAAKC,UAAU,8BAAf,UACE,oBAAIA,UAAU,2BAAd,SACGP,EAAOQ,OAEV,sBAAKD,UAAU,eAAf,UACE,sBAAMA,UAAU,YAAhB,4BAAyCP,EAAOS,WAChD,sBAAMF,UAAU,YAAhB,+BACkBP,EAAOU,yBCbtBC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACrB,qBAAKL,UAAU,UAAf,SACGK,EAAQb,KAAI,SAAAc,GAAO,OAClB,cAAC,EAAD,CACED,QAASA,EACTZ,OAAQa,GACHA,EAAQX,UCNfY,EAAaC,EAAQ,IAEdC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,KAAlB,OACpB,cAAC,IAAD,CACEf,GAAIe,EACJC,OAAK,EAFP,SAIE,wBACEb,UAAWO,EAAW,CACpB,sBAAsB,EACtBO,KAAK,EACL,aAA0B,WAAZH,EACd,WAAwB,SAAZA,GAAkC,SAAZA,GAJf,8BAKKA,IAC1BI,KAAK,SAPP,SASGL,OCjBMM,EAAY,SAAC,GAAD,IAAGN,EAAH,EAAGA,KAAH,OACvB,qBAAKV,UAAU,qBAAf,SACGU,KCFQO,EAAa,SAAC,GAAD,IAAGxB,EAAH,EAAGA,OAAQyB,EAAX,EAAWA,UAAX,OACxB,qCACE,oBAAIlB,UAAU,qBAAd,SAAoCP,EAAOQ,OAC3C,mBAAGD,UAAU,+BAAb,oCACuBP,EAAO0B,mBAE9B,mBAAGnB,UAAU,wBAAb,6BACgBP,EAAO2B,YAEvB,mBAAGpB,UAAU,uBAAb,4BACeP,EAAOS,WAEtB,mBAAGF,UAAU,uBAAb,4BACeP,EAAO4B,WAEtB,mBAAGrB,UAAU,uBAAb,4BACeP,EAAO6B,WAEtB,mBAAGtB,UAAU,0BAAb,+BACkBP,EAAOU,cAEzB,sBAAKH,UAAU,yBAAf,UACGkB,GAAkC,IAArBA,EAAUK,QACtB,8DAEDL,EACCA,EAAUK,OAAS,GACjB,qDAEGL,EAAU1B,KAAI,SAAAgC,GAAM,OACnB,mBACExB,UAAU,wBADZ,SAIGwB,EAAOvB,MAFHuB,EAAOvB,YAQpB,kDA4ERgB,EAAWQ,aAAe,CACxBP,UAAW,MClHN,IAAMQ,EAAa,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOtB,EAAc,EAAdA,QAAc,EACduB,mBAAS,MADK,mBACzCV,EADyC,KAC9BW,EAD8B,KAE1CC,GAAYH,EAAMI,OAAOD,SACzBrC,EAASY,EAAQ2B,MAAK,SAAAC,GAAE,OAAIA,EAAGtC,KAAOmC,KACtCI,EAAgB7B,EAAQkB,OA8B9B,OA5BAY,qBAAU,WACR,IAAMC,EAAS,GAEV3C,IAI2B,IAA5BA,EAAOyB,UAAUK,QACnBM,EAAa,IAGfpC,EAAOyB,UAAUmB,SAAQ,SAACC,GACxB,IAAMzD,EAAMyD,EAAUC,QAAQ,OAAQ,SAEtCzD,MAAMD,GACHG,MAAK,SAAAwC,GAAM,OAAIA,EAAOlC,UACtBN,MAAK,SAACwD,GACLJ,EAAOK,KAAKD,MAEbxD,MAAK,WACJ6C,EAAa,GAAD,OAAKO,aAGtB,CAACN,IAEmC,OAAlBI,GAA0BJ,EAAWI,GACtDJ,GAAY,GAAuB,OAAlBI,EAGZJ,EAAWI,EAChB,sBAAKlC,UAAU,cAAf,UACE,cAAC,EAAD,CAAWU,KAAK,mBAChB,cAAC,EAAD,CACEA,KAAK,IACLC,QAAQ,SACRC,KAAK,aAGP,cAAC,EAAD,CACEF,KAAK,IACLC,QAAQ,OACRC,KAAI,mBAAckB,EAAW,QAIjC,sBAAK9B,UAAU,cAAf,UACE,cAAC,EAAD,CAAWU,KAAK,mBAChB,cAAC,EAAD,CACEA,KAAK,IACLC,QAAQ,SACRC,KAAK,aAEP,cAAC,EAAD,CACEF,KAAK,IACLC,QAAQ,OACRC,KAAI,mBAAckB,EAAW,QAM9BrC,EACL,sBAAKO,UAAU,cAAf,UACE,cAAC,EAAD,CACEU,KAAK,IACLC,QAAQ,OACRC,KAAI,mBAAckB,EAAW,KAE/B,cAAC,EAAD,CACEpB,KAAK,IACLC,QAAQ,OACRC,KAAI,mBAAckB,EAAW,KAE/B,cAAC,EAAD,CACEpB,KAAK,IACLC,QAAQ,SACRC,KAAK,aAEP,cAAC,EAAD,CACEnB,OAAQA,EACRyB,UAAWA,OAIf,cAAC,EAAD,CAAWR,KAAK,gBCvFPgC,EAAM,WAAO,IAAD,EACOd,mBAAS,IADhB,mBAChBvB,EADgB,KACPsC,EADO,KAQvB,OALAR,qBAAU,WACRvD,IACGI,KAAK2D,KACP,IAEItC,EACL,gCACE,oBAAIL,UAAU,cAAd,gCACA,eAAC,IAAD,WACE,cAAC,IAAD,CACE4C,KAAK,WACLC,OAAQ,SAAAC,GAAY,OAClB,cAAC,EAAD,2BACMA,GADN,IAEEzC,QAASA,MAGbQ,OAAK,IAGP,cAAC,IAAD,CACE+B,KAAK,qBACLC,OAAQ,SAAAC,GAAY,OAClB,cAAC,EAAD,2BACMA,GADN,IAEEzC,QAASA,QAKf,cAAC,IAAD,CAAUuC,KAAK,IAAI/C,GAAG,WAAWgB,OAAK,IACtC,cAAC,IAAD,CAAU+B,KAAK,qBAAqB/C,GAAG,WAAWgB,OAAK,IAEvD,sBAAKb,UAAU,aAAf,UACE,cAAC,EAAD,CAAWU,KAAK,sBAChB,cAAC,EAAD,CACEA,KAAK,eACLC,QAAQ,SACRC,KAAK,sBAMb,cAAC,EAAD,CAAWF,KAAK,gBClDpBqC,IAASF,OACP,cAAC,IAAMG,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.86ac5140.chunk.js","sourcesContent":["export const BASE_URL = 'https://swapi.dev/api/';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((result) => {\n    if (!result.ok) {\n      throw new Error(`${result.status} - ${result.statusText}`);\n    }\n\n    return result.json();\n  });\n\nexport const getPlanets = () => request('planets/')\n  .then(result => result.results)\n  .then(result => result.map((planet, i) => ({\n    ...planet,\n    id: i + 1,\n  })));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const Planet = ({ planet }) => (\n  <div>\n    <Link\n      to={`/planets/${planet.id}`}\n      style={{ textDecoration: 'none' }}\n    >\n      <div className=\"planets__planet planet card\">\n        <h1 className=\"planet__title card-title\">\n          {planet.name}\n        </h1>\n        <div className=\"planet__info\">\n          <span className=\"card-text\">{`Climate: ${planet.climate}`}</span>\n          <span className=\"card-text\">\n            {`Population: ${planet.population}`}\n          </span>\n        </div>\n      </div>\n    </Link>\n  </div>\n);\n\nPlanet.propTypes = {\n  planet: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    rotation_period: PropTypes.string,\n    orbital_period: PropTypes.string,\n    diameter: PropTypes.string,\n    climate: PropTypes.string,\n    gravity: PropTypes.string,\n    terrain: PropTypes.string,\n    surface_water: PropTypes.string,\n    population: PropTypes.string,\n    residents: PropTypes.arrayOf(PropTypes.string),\n    films: PropTypes.arrayOf(PropTypes.string),\n    created: PropTypes.string,\n    edited: PropTypes.string,\n    url: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Planet } from '../Planet';\n\nexport const Planets = ({ planets }) => (\n  <div className=\"planets\">\n    {planets.map(planetX => (\n      <Planet\n        planets={planets}\n        planet={planetX}\n        key={planetX.id}\n      />\n    ))}\n  </div>\n);\n\nPlanets.propTypes = {\n  planets: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      rotation_period: PropTypes.string,\n      orbital_period: PropTypes.string,\n      diameter: PropTypes.string,\n      climate: PropTypes.string,\n      gravity: PropTypes.string,\n      terrain: PropTypes.string,\n      surface_water: PropTypes.string,\n      population: PropTypes.string,\n      residents: PropTypes.arrayOf(PropTypes.string),\n      films: PropTypes.arrayOf(PropTypes.string),\n      created: PropTypes.string,\n      edited: PropTypes.string,\n      url: PropTypes.string,\n    }),\n  ).isRequired,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst classNames = require('classnames');\n\nexport const Button = ({ text, mission, href }) => (\n  <Link\n    to={href}\n    exact\n  >\n    <button\n      className={classNames({\n        'planet-page__arrow': true,\n        btn: true,\n        'btn-danger': mission === 'return',\n        'btn-dark': mission === 'next' || mission === 'prev',\n      }, `planet-page__arrow--${mission}`)}\n      type=\"button\"\n    >\n      {text}\n    </button>\n  </Link>\n);\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  mission: PropTypes.string.isRequired,\n  href: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const PageError = ({ text }) => (\n  <div className=\"planet-page__error\">\n    {text}\n  </div>\n);\n\nPageError.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const PlanetInfo = ({ planet, residents }) => (\n  <>\n    <h1 className=\"planet-page__title\">{planet.name}</h1>\n    <p className=\"planet-page__rotation-period\">\n      {`Rotation period: ${planet.rotation_period}`}\n    </p>\n    <p className=\"planet-page__diameter\">\n      {`Diameter: ${planet.diameter}`}\n    </p>\n    <p className=\"planet-page__climate\">\n      {`Climate: ${planet.climate}`}\n    </p>\n    <p className=\"planet-page__gravity\">\n      {`GRavity: ${planet.gravity}`}\n    </p>\n    <p className=\"planet-page__terrain\">\n      {`Terrain: ${planet.terrain}`}\n    </p>\n    <p className=\"planet-page__population\">\n      {`Population: ${planet.population}`}\n    </p>\n    <div className=\"planet-page__residents\">\n      {residents && residents.length === 0 && (\n        <div>We know nobody from here...</div>\n      )}\n      {residents ? (\n        residents.length > 0 && (\n          <div>\n            You may know them:\n            {residents.map(person => (\n              <p\n                className=\"planet-page__resident\"\n                key={person.name}\n              >\n                {person.name}\n              </p>\n            ))}\n          </div>\n        )\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  </>\n);\n\nPlanetInfo.propTypes = {\n  planet: PropTypes.shape({\n    name: PropTypes.string,\n    rotation_period: PropTypes.string,\n    orbital_period: PropTypes.string,\n    diameter: PropTypes.string,\n    climate: PropTypes.string,\n    gravity: PropTypes.string,\n    terrain: PropTypes.string,\n    surface_water: PropTypes.string,\n    films: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.arrayOf(\n        PropTypes.string,\n      ),\n    ]),\n    population: PropTypes.string,\n    residents: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.arrayOf(\n        PropTypes.string,\n      ),\n    ]),\n    created: PropTypes.string,\n    edited: PropTypes.string,\n    url: PropTypes.string,\n  }).isRequired,\n  residents: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      height: PropTypes.string,\n      mass: PropTypes.string,\n      hair_color: PropTypes.string,\n      skin_color: PropTypes.string,\n      eye_color: PropTypes.string,\n      birth_year: PropTypes.string,\n      gender: PropTypes.string,\n      homeworld: PropTypes.string,\n      films: PropTypes.oneOfType([\n        PropTypes.array,\n        PropTypes.arrayOf(\n          PropTypes.string,\n        ),\n      ]),\n      species: PropTypes.oneOfType([\n        PropTypes.array,\n        PropTypes.arrayOf(\n          PropTypes.string,\n        ),\n      ]),\n      vehicles: PropTypes.oneOfType([\n        PropTypes.array,\n        PropTypes.arrayOf(\n          PropTypes.string,\n        ),\n      ]),\n      starships: PropTypes.oneOfType([\n        PropTypes.array,\n        PropTypes.arrayOf(\n          PropTypes.string,\n        ),\n      ]),\n      created: PropTypes.string,\n      edited: PropTypes.string,\n      url: PropTypes.string,\n    })),\n  ]),\n};\n\nPlanetInfo.defaultProps = {\n  residents: null,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '../Button';\nimport { PageError } from '../PageError';\nimport { PlanetInfo } from '../PlanetInfo';\n\nexport const PlanetPage = ({ match, planets }) => {\n  const [residents, setResidents] = useState(null);\n  const planetId = +match.params.planetId;\n  const planet = planets.find(pl => pl.id === planetId);\n  const planetsLength = planets.length;\n\n  useEffect(() => {\n    const people = [];\n\n    if (!planet) {\n      return;\n    }\n\n    if (planet.residents.length === 0) {\n      setResidents([]);\n    }\n\n    planet.residents.forEach((personURL) => {\n      const url = personURL.replace('http', 'https');\n\n      fetch(url)\n        .then(person => person.json())\n        .then((personJSON) => {\n          people.push(personJSON);\n        })\n        .then(() => {\n          setResidents([...people]);\n        });\n    });\n  }, [planetId]);\n\n  const isErrorPage = (planetsLength !== null && planetId > planetsLength)\n  || (planetId <= 0 && planetsLength !== null);\n\n  if (isErrorPage) {\n    return planetId > planetsLength ? (\n      <div className=\"planet-page\">\n        <PageError text=\"Thant&apos;s all...\" />\n        <Button\n          text=\"X\"\n          mission=\"return\"\n          href=\"/planets\"\n        />\n\n        <Button\n          text=\"<\"\n          mission=\"prev\"\n          href={`/planets/${planetId - 1}`}\n        />\n      </div>\n    ) : (\n      <div className=\"planet-page\">\n        <PageError text=\"Thant&apos;s all...\" />\n        <Button\n          text=\"X\"\n          mission=\"return\"\n          href=\"/planets\"\n        />\n        <Button\n          text=\">\"\n          mission=\"next\"\n          href={`/planets/${planetId + 1}`}\n        />\n      </div>\n    );\n  }\n\n  return planet ? (\n    <div className=\"planet-page\">\n      <Button\n        text=\">\"\n        mission=\"next\"\n        href={`/planets/${planetId + 1}`}\n      />\n      <Button\n        text=\"<\"\n        mission=\"prev\"\n        href={`/planets/${planetId - 1}`}\n      />\n      <Button\n        text=\"X\"\n        mission=\"return\"\n        href=\"/planets\"\n      />\n      <PlanetInfo\n        planet={planet}\n        residents={residents}\n      />\n    </div>\n  ) : (\n    <PageError text=\"Loading...\" />\n  );\n};\n\nPlanetPage.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      planetId: PropTypes.string,\n    }),\n  }).isRequired,\n  planets: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      rotation_period: PropTypes.string,\n      orbital_period: PropTypes.string,\n      diameter: PropTypes.string,\n      climate: PropTypes.string,\n      gravity: PropTypes.string,\n      terrain: PropTypes.string,\n      surface_water: PropTypes.string,\n      population: PropTypes.string,\n      residents: PropTypes.arrayOf(PropTypes.string),\n      films: PropTypes.arrayOf(PropTypes.string),\n      created: PropTypes.string,\n      edited: PropTypes.string,\n      url: PropTypes.string,\n    }),\n  ).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './main.scss';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { getPlanets } from './api/api';\nimport { Planets } from './components/Planets';\nimport { PlanetPage } from './components/PlanetPage';\nimport { PageError } from './components/PageError';\nimport { Button } from './components/Button';\n\nexport const App = () => {\n  const [planets, setPlanets] = useState([]);\n\n  useEffect(() => {\n    getPlanets()\n      .then(setPlanets);\n  }, []);\n\n  return planets ? (\n    <div>\n      <h1 className=\"page__title\">Star wars universe</h1>\n      <Switch>\n        <Route\n          path=\"/planets\"\n          render={routerParams => (\n            <Planets\n              {...routerParams}\n              planets={planets}\n            />\n          )}\n          exact\n        />\n\n        <Route\n          path=\"/planets/:planetId\"\n          render={routerParams => (\n            <PlanetPage\n              {...routerParams}\n              planets={planets}\n            />\n          )}\n        />\n\n        <Redirect path=\"/\" to=\"/planets\" exact />\n        <Redirect path=\"/genesis_react-app\" to=\"/planets\" exact />\n\n        <div className=\"error-page\">\n          <PageError text=\"Page is not found\" />\n          <Button\n            text=\"back to main\"\n            mission=\"return\"\n            href=\"/planets\"\n          />\n        </div>\n      </Switch>\n    </div>\n  ) : (\n    <PageError text=\"Loading...\" />\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}